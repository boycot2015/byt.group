---
import { KIcon } from '@ikun-ui/icon';
// // 1. ‰∏∫ÊØè‰∏™ÈõÜÂêàÊù°ÁõÆÁîüÊàê‰∏Ä‰∏™Êñ∞Ë∑ØÂæÑ
export async function getStaticPaths() {
  const commDocsify = {
    auto2top: true,
    loadNavbar: true,
    mergeNavbar: true,
    mergeSidebar: true,
    autoHeader: true,
    loadSidebar: true,
    subMaxLevel: 3,
    // relativePath: true,
    coverpage: true,
    // search: 'auto',
    search: {
      maxAge: 86400000, // Expiration time, the default one day
      paths: 'auto', // or []
      placeholder: 'ÊêúÁ¥¢',
      noData: 'Êâæ‰∏çÂà∞ÁªìÊûú!',
      // Headline depth, 1 - 6
      depth: 2,
    },
    // routerMode: 'history',
    // onlyCover: true,
    // Â≠óÊï∞ÁªüËÆ°
    count:{
      countable: true,
      position: 'top',
      margin: '10px',
      float: 'right',
      fontsize:'1em',
      color:'rgb(90,90,90)',
      language:'chinese',
      localization: {
        words: "",
        minute: ""
      },
      isExpected: true
    },
    // È°µËÑö
    footer: {
      copy: '<span>Copyright &copy; 2021 &nbsp üíñ &nbsp</span>',
      auth: ' <strong><a href="https://github.com/boycot2015" target="_blank">Boycot</a></strong>',
      pre: '<hr/>',
      style: 'font-size: 18px; text-align: center;',
    },
    plugins: []
  }
  const pages = [
    {
      app: 'sw.js'
    },
    {
      app: '_coverpage.md'
    },
    {
      app: '_navbar.md'
    },
    {
      app: '_sidebar.md'
    },
    {
      app: 'favicon.ico'
    },
    {
      app: 'astro',
      title: "Astro ÊñáÊ°£",
      text: "Astro ÊñáÊ°£ node.js",
      docsify: {
        ...commDocsify,
        search: {
          ...commDocsify.search,
          namespace: 'astro/*'
        },
        name: 'astro',
        nameLink: '/docs/astro#/',
        themeColor: '#3D50F5',
        repo: 'https://github.com/withastro/astro',
        basePath: `/docs/astro/`,
      },
    },
    {
      app: 'music',
      title: "ÁΩëÊòì‰∫ëÈü≥‰πê NodeJS Áâà API",
      text: "ÁΩëÊòì‰∫ëÈü≥‰πê,ÁΩëÊòì‰∫ëÈü≥‰πê api,ÁΩëÊòì‰∫ëÈü≥‰πê nodejs,ÁΩëÊòì‰∫ëÈü≥‰πê node.js",
      docsify: {
        ...commDocsify,
        search: {
          ...commDocsify.search,
          namespace: 'music/*'
        },
        name: 'ÁΩëÊòì‰∫ëÈü≥‰πê API',
        nameLink: '/docs/music#/',
        themeColor: '#42b983',
        repo: 'https://github.com/boycot2015/music-api',
        basePath: `/docs/music/`,
      },
    },
  ];
  return pages.map(({ app, title, text, docsify }) => {
    return {
      params: { app },
      props: { title, text, docsify },
    };
  });
}
const { title, text, docsify } = Astro.props;
const { app } = Astro.params;
---

<html lang="zh-cn">
<head>
  <meta charset="UTF-8">
  <meta name="KEYWords" content={title}>
  <meta name="description" content={text}>
  <title>{title}</title>
  <link rel="icon" href="favicon.ico">
  <meta name="description" content="Description">
  <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
  <meta name="referrer" content="never">
  <link rel="stylesheet" href="https://unpkg.com/docsify/lib/themes/vue.css">
</head>
<body class={app}>
  <div id="app"></div>
  <div id="scroll-to-top" title="ÂõûÂà∞È°∂ÈÉ®"><KIcon icon="i-carbon-rocket" /></div>
</body>
<script async define:vars={{ docsify }}>
    window.$docsify = docsify || {}
    $docsify.plugins = [].concat([
      function footer (hook, vm) {
        // let userOptions = vm.config.footer;
        let copy = vm.config.footer && vm.config.footer.copy ? vm.config.footer.copy : '<span>&copy; 2019.</span>';
        let auth = vm.config.footer && vm.config.footer.auth
            ? vm.config.footer.auth
            : '<span>Published with <a href="https://github.com/docsifyjs/docsify" target="_blank" rel="noreferrer" rel="noopener">docsify</a>.</span>';
        let style = vm.config.footer && vm.config.footer.style ? `style="${vm.config.footer.style}"` : '';
        let clazz = vm.config.footer && vm.config.footer.class ? `class="${vm.config.footer.class}"` : '';
        let pre = vm.config.footer && vm.config.footer.pre ? `${vm.config.footer.pre}` : '';
        var footer = `${pre}<footer ${style} ${clazz}>${copy} ${auth}</footer>`;

        hook.afterEach(function (html) {
          return html + footer;
        })
      },
      function count(hook, vm) {
        let userOptions = vm.config.count;
        var defaultOptions = {
          countable: true,
          position: "top",
          margin: "10px",
          float: "right",
          fontsize: "0.9em",
          language: "english",
          localization: {
            words: "",
            minute: "",
          },
          isExpected: true,
          ...userOptions,
          color: docsify?.themeColor
        }
        if (!defaultOptions.countable) {
            return
        }
        let wordsCount
        hook.beforeEach(function (content) {
            // Match regex every time you start parsing .md
            wordsCount = content.match(
                /([\u0800-\u4e00]+?|[\u4e00-\u9fa5]+?|[a-zA-Z0-9]+)/g
            ).length
            return content
        })
        hook.afterEach(function (html, next) {
            // Support localization
            let str = wordsCount + " words"
            let readTime = Math.ceil(wordsCount / 400) + " min"
            if (defaultOptions.language === "chinese") {
                str = wordsCount
                readTime = Math.ceil(wordsCount / 400)
            } else if (
                defaultOptions.localization.words.length !== 0 &&
                defaultOptions.localization.minute.length !== 0
            ) {
                str = wordsCount + defaultOptions.localization.words
                readTime =
                    Math.ceil(wordsCount / 400) + defaultOptions.localization.minute
            }
            
            //add html string
            
            next(
                `
            ${defaultOptions.position === "bottom" ? html : ""}
            <div style="margin-${defaultOptions.position ? "bottom" : "top"}: ${
                    defaultOptions.margin
                };">
                <span style="
                      float: ${defaultOptions.float === "right" ? "right" : "left"};
                      font-size: ${defaultOptions.fontsize};
                      color:${defaultOptions.color};">
                ÂÖ±&nbsp;${str}&nbsp;Â≠ó
                ${defaultOptions.isExpected ? `&nbsp; | &nbsp;ÈòÖËØªÊó∂Èïø&nbsp;${readTime}&nbsp;ÂàÜÈíü` : ""}
                </span>
                <div style="clear: both"></div>
            </div>
            ${defaultOptions.position !== "bottom" ? html : ""}
            `
            )
        })
    }], $docsify.plugins || []);
</script>
  <!-- Á¶ªÁ∫øÊ®°Âºè -->
<script>
    if (typeof navigator.serviceWorker !== 'undefined') {
      navigator.serviceWorker.register('sw.js')
    }
</script>
<script is:inline>
  function siteTime() {
      window.setTimeout("siteTime()", 1000);
      var seconds = 1000;
      var minutes = seconds * 60;
      var hours = minutes * 60;
      var days = hours * 24;
      var years = days * 365;
      var today = new Date();
      var todayYear = today.getFullYear();
      var todayMonth = today.getMonth() + 1;
      var todayDate = today.getDate();
      var todayHour = today.getHours();
      var todayMinute = today.getMinutes();
      var todaySecond = today.getSeconds();
      /* Date.UTC() -- ËøîÂõûdateÂØπË±°Ë∑ù‰∏ñÁïåÊ†áÂáÜÊó∂Èó¥(UTC)1970Âπ¥1Êúà1Êó•ÂçàÂ§ú‰πãÈó¥ÁöÑÊØ´ÁßíÊï∞(Êó∂Èó¥Êà≥)
      year - ‰Ωú‰∏∫dateÂØπË±°ÁöÑÂπ¥‰ªΩÔºå‰∏∫4‰ΩçÂπ¥‰ªΩÂÄº
      month - 0-11‰πãÈó¥ÁöÑÊï¥Êï∞ÔºåÂÅö‰∏∫dateÂØπË±°ÁöÑÊúà‰ªΩ
      day - 1-31‰πãÈó¥ÁöÑÊï¥Êï∞ÔºåÂÅö‰∏∫dateÂØπË±°ÁöÑÂ§©Êï∞
      hours - 0(ÂçàÂ§ú24ÁÇπ)-23‰πãÈó¥ÁöÑÊï¥Êï∞ÔºåÂÅö‰∏∫dateÂØπË±°ÁöÑÂ∞èÊó∂Êï∞
      minutes - 0-59‰πãÈó¥ÁöÑÊï¥Êï∞ÔºåÂÅö‰∏∫dateÂØπË±°ÁöÑÂàÜÈíüÊï∞
      seconds - 0-59‰πãÈó¥ÁöÑÊï¥Êï∞ÔºåÂÅö‰∏∫dateÂØπË±°ÁöÑÁßíÊï∞
      microseconds - 0-999‰πãÈó¥ÁöÑÊï¥Êï∞ÔºåÂÅö‰∏∫dateÂØπË±°ÁöÑÊØ´ÁßíÊï∞ */

      /* Âª∫Á´ôÊó∂Èó¥ */
      var t1 = Date.UTC(2021, 0o3, 0o1, 0o0, 0o0, 0o0); 
      var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond);
      var diff = t2 - t1;
      var diffYears = Math.floor(diff / years);
      var diffDays = Math.floor((diff / days) - diffYears * 365);
      var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours);
      var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes);
      var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds);
      if (document.getElementById("sitetime")) {
        document.getElementById("sitetime").innerHTML = " Êú¨Á´ôÂ∑≤ÂÆâÂÖ®ËøêË°å " + diffYears + " Âπ¥ " + diffDays + " Â§© " + diffHours + " Â∞èÊó∂ " + diffMinutes + " ÂàÜ " + diffSeconds + " Áßí ";
      }
  }
  siteTime();
  document.querySelector('#scroll-to-top')?.addEventListener('click', () => {
    scrollToTop()
  })
  function scrollToTop () {
    const cubic = value => Math.pow(value, 3)
    const easeInOutCubic = value => value < 0.5
    ? cubic(value * 2) / 2
    : 1 - cubic((1 - value) * 2) / 2
    const el = document.documentElement
    const beginTime = Date.now()
    const beginValue = el.scrollTop
    const rAF = window.requestAnimationFrame || (func => setTimeout(func, 16))
    const frameFunc = () => {
        const progress = (Date.now() - beginTime) / 500
        if (progress < 1) {
            el.scrollTop = beginValue * (1 - easeInOutCubic(progress))
            rAF(frameFunc)
        } else {
            el.scrollTop = 0
        }
    };
    rAF(frameFunc)
  }
</script>
<script is:inline src="//unpkg.com/docsify@4.11.3/lib/docsify.min.js"></script>
<script is:inline src="//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js"></script>
</html>
<style lang="less" is:global define:vars={{themeColor: docsify?.themeColor}}>
  #scroll-to-top {
    position: fixed;
    right: 20px;
    bottom: 60px;
    cursor: pointer;
    border-radius: 10px;
    font-size: 12px;
    color: #fff;
    box-shadow: 0 0 10px #ccc;
    background: linear-gradient(to right, #999, var(--themeColor));
    padding: 8px;
  }
  body.astro {
    section.cover ul {
      max-width: 540px !important;
      text-align: justify;
      li {
        line-height: 28px;
      }
    }
  }
</style>